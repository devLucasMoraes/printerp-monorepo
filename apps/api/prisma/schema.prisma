// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  username     String
  email        String?  @unique
  passwordHash String   @map("password_hash")
  avatarUrl    String?  @map("avatar_url")
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  tokens                Token[]
  accounts              Account[]
  member_on             Member[]
  categoriasCriadas     Categoria[] @relation("CategoriaCreatedBy")
  categoriasAtualizadas Categoria[] @relation("CategoriaUpdatedBy")
  categoriasDeletadas   Categoria[] @relation("CategoriaDeletedBy")

  @@unique([organizationId, username])
  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  user           User          @relation(fields: [userId], references: [id])
  userId         String        @map("user_id")
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@map("tokens")
}

enum AccountProvider {
  GITHUB
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user           User          @relation(fields: [userId], references: [id])
  userId         String        @map("user_id")
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@unique([provider, userId])
  @@map("accounts")
}

enum Role {
  SUPER_ADMIN // Administrador do sistema inteiro
  ADMIN // Administrador da organização
  MEMBER // Membro comum
  BILLING // Financeiro
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id                        String   @id @default(uuid())
  name                      String
  slug                      String   @unique
  domain                    String?  @unique
  shouldAttachUsersByDomain Boolean  @default(false) @map("should_attach_users_by_domain")
  avatarUrl                 String?  @map("avatar_url")
  active                    Boolean  @default(true)
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  tokens     Token[]
  accounts   Account[]
  members    Member[]
  users      User[]
  categorias Categoria[]

  @@map("organizations")
}

model Categoria {
  id   String @id @default(uuid())
  nome String
  slug String

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  createdAt   DateTime @default(now()) @map("created_at")
  createdBy   User     @relation("CategoriaCreatedBy", fields: [createdById], references: [id])
  createdById String   @map("created_by_id")

  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedBy   User?    @relation("CategoriaUpdatedBy", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by_id")

  deletedAt   DateTime? @map("deleted_at")
  deletedBy   User?     @relation("CategoriaDeletedBy", fields: [deletedById], references: [id])
  deletedById String?   @map("deleted_by_id")

  @@unique([slug, organizationId])
  @@unique([nome, organizationId])
  @@map("categorias")
}
